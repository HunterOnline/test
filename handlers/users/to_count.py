import asyncio
import logging

from aiogram import types
from aiogram.dispatcher import FSMContext

from keyboards.default.main_button import main_button
from keyboards.inline.drugs_buttons import drugs_list_keyboard, drugs_callback, manipulations_keyboard, \
    back_drug_keyboard
from keyboards.inline.fix_buttons import fix_keyboard, fix_callback
from loader import dp, bot
from states.fix_state import FixMessage, CalcMessage
from utils.db_api import quick_commands
from utils.misc import rate_limit
from utils.misc.reset_fsm_state import set_reset_timer
import prettytable as pt

"""–ú–ï–ù–Æ –ö–ù–û–ü–û–ö"""

"""–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–∏ –æ–ø—ñ–∫–∞—Ö"""


@rate_limit(5, "–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–∏ –æ–ø—ñ–∫–∞—Ö üî•")
@dp.message_handler(text="–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–∏ –æ–ø—ñ–∫–∞—Ö üî•")
async def calculate_burns(message: types.Message, state: FSMContext):
    try:
            user_id = message.from_user.id
            name = message.from_user.get_mention()
            await quick_commands.add_user(user_id, name)

            logging.info(f"{message.from_user.full_name} -> –∑–∞–ø–∏—Å–∞–Ω–∏ –≤ –ë–î")

    except Exception as e:
            print(e)


    await message.answer("<b>üö©–í–≤–µ–¥—ñ—Ç—å <u>–í–ê–ì–£</u> –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö\n(–º–∞—î –±—É—Ç–∏ –æ–¥–Ω–µ —á–∏—Å–ª–æ‚ùó)</b>", reply_markup=main_button)
    await FixMessage.EnterWeight.set()
    logging.info(message.from_user.full_name + " -> pressed [–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–∏ –æ–ø—ñ–∫–∞—Ö üî•]")
    await set_reset_timer(user_id=message.from_user.id, state=state, timeout_seconds=90)


@dp.message_handler(state=FixMessage.EnterWeight)
async def enter_weight(message: types.Message, state: FSMContext):
    if message.text.strip().isdigit():
        await state.update_data(weight=message.text, mention=message.from_user.get_mention())
        await message.answer(f'<b>üö©–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å <u>–û–ü–Ü–ö–Ü–í</u> —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö\n(–º–∞—î –±—É—Ç–∏ –æ–¥–Ω–µ —á–∏—Å–ª–æ‚ùó)</b>')
        await FixMessage.next()

    else:
        await state.update_data(weight=message.text, mention=message.from_user.get_mention())
        await message.answer(
            f'<b>‚õî–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥—ñ—Ç—å <u>–í–ê–ì–£</u> –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö\n(–º–∞—î –±—É—Ç–∏ –æ–¥–Ω–µ —á–∏—Å–ª–æ‚ùó)</b>',
            reply_markup=fix_keyboard)


@dp.message_handler(state=FixMessage.EnterBurns)
async def enter_weight(message: types.Message, state: FSMContext):
    await state.update_data(burns=message.text, mention=message.from_user.get_mention())
    if message.text.strip().isdigit():
        async with state.proxy() as data:
            weight = int(data.get('weight'))
            burns = int(data.get('burns'))
            await state.finish()
        round_weight = round(weight / 10) * 10
        round_burns = round(burns / 10) * 10
        if weight > 80:
            mill_per_hour = round_burns * 10 + (round_weight - 80) * 10
            drops_per_second = (mill_per_hour / 3600) * 20
            await message.answer(
                f"<b>–í–ê–ì–ê ‚âà {round_weight}–∫–≥\n–û–ü–Ü–ö–ò ‚âà {round_burns}%\n–û–ë'–Ñ–ú = {mill_per_hour} –º–ª/–≥–æ–¥\n<u>–®–í–ò–î–ö–Ü–°–¢–¨ –í–õ–ò–í–ê–ù–ù–Ø ‚âà {drops_per_second:.2f} –∫—Ä–∞–ø–µ–ª—å/—Å–µ–∫—É–Ω–¥—É</u></b>")
        else:
            mill_per_hour = round_burns * 10
            drops_per_second = (mill_per_hour / 3600) * 20
            await message.answer(
                f"<b>–í–ê–ì–ê ‚âà {round_weight}–∫–≥\n–û–ü–Ü–ö–ò ‚âà {round_burns}%\n–û–ë'–Ñ–ú = {mill_per_hour} –º–ª/–≥–æ–¥\n<u>–®–í–ò–î–ö–Ü–°–¢–¨ –í–õ–ò–í–ê–ù–ù–Ø ‚âà {drops_per_second:.2f} –∫—Ä–∞–ø–µ–ª—å/—Å–µ–∫—É–Ω–¥—É</u></b>")


    else:
        await state.update_data(text_answer=message.text, mention=message.from_user.get_mention())
        await message.answer(
            f'<b>‚õî–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å <u>–û–ü–Ü–ö–Ü–í</u> —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö\n(–º–∞—î –±—É—Ç–∏ –æ–¥–Ω–µ —á–∏—Å–ª–æ‚ùó)</b>',
            reply_markup=fix_keyboard)


@dp.callback_query_handler(fix_callback.filter(action='cancel'), state=FixMessage.EnterWeight)
@dp.callback_query_handler(fix_callback.filter(action='cancel'), state=FixMessage.EnterBurns)
async def cancel_state(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await state.finish()

    await call.answer("–î–∞–Ω—ñ –∞–Ω—É–ª—å–æ–≤–∞–Ω–æ!üóë", show_alert=True)


"""–®–ø–∞—Ä–≥–∞–ª–∫–∞"""


@rate_limit(5, "–®–ø–∞—Ä–≥–∞–ª–∫–∞ üìã")
@dp.message_handler(text="–®–ø–∞—Ä–≥–∞–ª–∫–∞ üìã")
async def calculate_burns(message: types.Message):
    try:
            user_id = message.from_user.id
            name = message.from_user.get_mention()
            await quick_commands.add_user(user_id, name)

            logging.info(f"{message.from_user.full_name} -> –∑–∞–ø–∏—Å–∞–Ω–∏ –≤ –ë–î")

    except Exception as e:
            print(e)


    await message.answer_document(open("data/–ø—Ä–µ–ø–∞—Ä–∞—Ç–∏.pdf", "rb"), reply_markup=main_button)

    logging.info(message.from_user.full_name + " -> pressed [–®–ø–∞—Ä–≥–∞–ª–∫–∞ üìã]")

"""________________________________________________________________"""
@rate_limit(5, "–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤ üíâ")
@dp.message_handler(text="–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤ üíâ")
async def drugs_menu(message: types.Message):
    try:
        user_id = message.from_user.id
        name = message.from_user.get_mention()
        await quick_commands.add_user(user_id, name)

        logging.info(f"{message.from_user.full_name} -> –∑–∞–ø–∏—Å–∞–Ω–∏ –≤ –ë–î")

    except Exception as e:
        print(e)

    logging.info(message.from_user.full_name + " -> pressed [–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤ üíâ]")
    await message.answer(text="<b>–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç: üíä</b>", reply_markup=drugs_list_keyboard)


@dp.callback_query_handler(drugs_callback.filter(action='interest'))
async def drugs_interest(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()

    if '–ö–ï–¢–ê–ú–Ü–ù' in call.message.text:
        await state.set_state('enter_ketamine')
        await call.message.answer("<b>–í–≤–µ–¥—ñ—Ç—å %-–≤—ñ—Å—Ç—å –ö–ï–¢–ê–ú–Ü–ù–£\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó)</b>")
    if 'TXA' in call.message.text:
        await state.set_state('enter_TXA')
        await call.message.answer("<b>–í–≤–µ–¥—ñ—Ç—å %-–≤—ñ—Å—Ç—å –¢–•–ê\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó)</b>")
    if "–ù–ê–õ–û–ö–°–û–ù" in call.message.text:
        await state.set_state('enter_nalokson')
        await call.message.answer("<b>–í–≤–µ–¥—ñ—Ç—å %-–≤—ñ—Å—Ç—å –ù–ê–õ–û–ö–°–û–ù–£\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó)</b>")
    if "–û–ù–î–ê–°–ï–¢–†–û–ù" in call.message.text:
        await state.set_state('enter_ondasetron')
        await call.message.answer("<b>–í–≤–µ–¥—ñ—Ç—å %-–≤—ñ—Å—Ç—å –û–î–ê–°–ï–¢–†–û–ù–£\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó)</b>")
    if "–°–∞\u00B2‚Å∫–•–õ–û–†–ò–î" in call.message.text:
        await state.set_state('enter_CaCl')
        await call.message.answer(
            "<b>–í–≤–µ–¥—ñ—Ç—å %-–≤—ñ—Å—Ç—å –°–∞\u00B2‚Å∫–•–õ–û–†–ò–î–£\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó)</b>")


@dp.callback_query_handler(drugs_callback.filter(action='back_to_drugs'))
async def drugs_manipulations(call: types.CallbackQuery, ):
    await call.message.delete()
    await call.message.answer(text="<b>–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç: üíä</b>", reply_markup=drugs_list_keyboard)


@dp.callback_query_handler(fix_callback.filter(action='cancel'), state='Ca_hlukoza')
@dp.callback_query_handler(fix_callback.filter(action='cancel'), state='enter_CaCl')
@dp.callback_query_handler(fix_callback.filter(action='cancel'), state='enter_ondasetron')
@dp.callback_query_handler(fix_callback.filter(action='cancel'), state='enter_nalokson')
@dp.callback_query_handler(fix_callback.filter(action='cancel'), state='enter_ketamine')
@dp.callback_query_handler(fix_callback.filter(action='cancel'), state='enter_TXA')
@dp.callback_query_handler(fix_callback.filter(action='cancel'), state=CalcMessage.EnterWight)
@dp.callback_query_handler(fix_callback.filter(action='cancel'), state=CalcMessage.EnterPercent)
async def cancel_state(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await state.finish()

    await call.answer("–î–∞–Ω—ñ –∞–Ω—É–ª—å–æ–≤–∞–Ω–æ!üóë", show_alert=True)

""" –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤ """

@dp.callback_query_handler(drugs_callback.filter(action='calculate'))
async def calculate_drug (call: types.CallbackQuery, state: FSMContext):

    await call.message.delete()

    await call.message.answer("<b>üö©–í–≤–µ–¥—ñ—Ç—å <u>%</u>-–≤—ñ—Å—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç—É\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó)</b>", parse_mode=types.ParseMode.HTML)
    await CalcMessage.EnterPercent.set()




@dp.message_handler(state=CalcMessage.EnterPercent)
async def enter_weight_drug(message: types.Message, state: FSMContext):
    try:
        float_persent = float(message.text.strip())
        await state.update_data(percent=float_persent, mention=message.from_user.get_mention())
        await message.answer(
            f'<b>üö©–í–≤–µ–¥—ñ—Ç—å  <u>–¥–æ–∑—É –ø—Ä–µ–ø–∞—Ä–∞—Ç—É –≤ –º–≥</u> —è–∫—É –ø–æ—Ç—Ä—ñ–±–≥–æ –≤–≤–µ—Å—Ç–∏\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó)1–≥-1000–º–≥</b>', parse_mode=types.ParseMode.HTML)
        await CalcMessage.next()
    except ValueError:
        await state.update_data(percent=message.text, mention=message.from_user.get_mention())
        await message.answer(
            f'<b>‚õî–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥—ñ—Ç—å <u>%</u> –ø—Ä–µ–ø–∞—Ä–∞—Ç—É\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó)</b>',
            reply_markup=fix_keyboard, parse_mode=types.ParseMode.HTML)


@dp.message_handler(state=CalcMessage.EnterWight)
async def enter_weight(message: types.Message, state: FSMContext):
    await state.update_data(wight=message.text, mention=message.from_user.get_mention())
    try:
        async with state.proxy() as data:
            percent = float(data.get('percent'))
            wight = float(data.get('wight'))
            await state.finish()
        mg_ml = percent * 1000 / 100
        enter_ml = wight / mg_ml
        await message.answer(f"<b>–î–æ–∑–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –≤ –æ–±—î–º—ñ: {enter_ml} ml</b>", parse_mode=types.ParseMode.HTML)

    except ValueError:
        await state.update_data(text_answer=message.text, mention=message.from_user.get_mention())
        await message.answer(
            f'<b>‚õî–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥—ñ—Ç—å  <u>–¥–æ–∑—É –ø—Ä–µ–ø–∞—Ä–∞—Ç—É –≤ –º–≥</u> —è–∫—É –ø–æ—Ç—Ä—ñ–±–≥–æ –≤–≤–µ—Å—Ç–∏\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó) 1–≥-1000–º–≥</b>',
            reply_markup=fix_keyboard, parse_mode=types.ParseMode.HTML)






"""KETAMIN"""


@dp.callback_query_handler(drugs_callback.filter(action='ketamine'))
async def ketamine(call: types.CallbackQuery, ):
    await call.message.delete()

    table = pt.PrettyTable(['–í–≤–µ–¥–µ–Ω–Ω—è', '–î–æ–∑–∞'])
    table.title = '–ö–ï–¢–ê–ú–Ü–ù'
    table.align['–í–≤–µ–¥–µ–Ω–Ω—è'] = 'l'
    table.align['–î–æ–∑–∞'] = 'r'

    data = [
        ('–≤/–≤', '20-30 –º–≥'),
        ('–≤/–∫', '20-30 –º–≥'),
        ('–≤/–º', '50-100 –º–≥'),
        ('—ñ/–Ω', '50-100 –º–≥'),
    ]
    for intro, dose in data:
        table.add_row([f'{intro}', f'{dose}'])
    await dp.bot.send_message(chat_id=call.from_user.id, text=f'<pre>üòñ–∑–Ω–µ–±–æ–ª–µ–Ω–Ω—è\n{table}</pre>',
                              parse_mode=types.ParseMode.HTML, reply_markup=manipulations_keyboard)


@dp.message_handler(state='enter_ketamine')
async def ketamine_calculate(message: types.Message, state: FSMContext):
    try:

        float_persent = float(message.text.strip())
        if float_persent<=0:
            raise ZeroDivisionError()
        mg_ml = float_persent * 1000 / 100
        enter_ml = {'vv_or_vk': f'{20 / mg_ml:.2f}-{30 / mg_ml:.2f} ml',
                    'vm_or_itro_nazal': f'{50 / mg_ml:.2f}-{100 / mg_ml:.2f} ml'}
        await state.finish()
        table = pt.PrettyTable(['–í–≤–µ–¥–µ–Ω–Ω—è', '–î–æ–∑–∞'])
        table.title = f'–î–û–ó–ê {float_persent}% –ö–ï–¢–ê–ú–Ü–ù–£ –≤ ml'
        table.align['–í–≤–µ–¥–µ–Ω–Ω—è'] = 'l'
        table.align['–î–æ–∑–∞'] = 'r'

        data = [
            ('–≤/–≤', enter_ml['vv_or_vk']),
            ('–≤/–∫', enter_ml['vv_or_vk']),
            ('–≤/–º', enter_ml['vm_or_itro_nazal']),
            ('—ñ/–Ω', enter_ml['vm_or_itro_nazal']),
        ]
        for intro, dose in data:
            table.add_row([f'{intro}', f'{dose}'])
        await message.answer(text=f'<pre>üòñ–∑–Ω–µ–±–æ–ª–µ–Ω–Ω—è\n{table}</pre>',
                             parse_mode=types.ParseMode.HTML, reply_markup=manipulations_keyboard)
    except ValueError:
        await state.update_data(percent=message.text, mention=message.from_user.get_mention())
        await message.answer(
            f'<b>‚õî–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥—ñ—Ç—å <u>%-–≤—ñ—Å—Ç—å</u> –ö–ï–¢–ê–ú–Ü–ù–£\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó</b>)',
            reply_markup=fix_keyboard)
    except ZeroDivisionError:
        print(f'ü§¶‚ÄçÔ∏è{message.from_user.full_name} —Ç—É–ø–∞—Ä—å!')
        await state.update_data(percent=message.text, mention=message.from_user.get_mention())
        await message.answer(
            f'<b>ü§¶‚Äç‚ôÇÔ∏è–ó–±–µ—Ä–∏—Å—å, –ø–æ–¥—É–º–∞–π —â–æ –Ω–µ —Ç–∞–∫!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥–∏ <u>%-–≤—ñ—Å—Ç—å</u> –ö–ï–¢–ê–ú–Ü–ù–£\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó</b>)',
            reply_markup=fix_keyboard)


"""TXA"""


@dp.callback_query_handler(drugs_callback.filter(action='TXA'))
async def drug_txa(call: types.CallbackQuery, ):
    await call.message.delete()

    table = pt.PrettyTable(['–í–≤–µ–¥–µ–Ω–Ω—è', '–î–æ–∑–∞'])
    table.title = 'TXA'
    table.align['–í–≤–µ–¥–µ–Ω–Ω—è'] = 'l'
    table.align['–î–æ–∑–∞'] = 'r'

    data = [
        ('–≤/–≤', '2 –≥—Ä (2000 –º–≥)'),
        ('–≤/–∫', '2 –≥—Ä (2000 –º–≥)'),

    ]
    for intro, dose in data:
        table.add_row([f'{intro}', f'{dose}'])
    await dp.bot.send_message(chat_id=call.from_user.id, text=f'<pre>ü©∏–∑–º–µ–Ω—à–µ–Ω–Ω—è –∫—Ä–æ–≤–æ–≤—Ç—Ä–∞—Ç–∏ \n{table}</pre>',
                              parse_mode=types.ParseMode.HTML, reply_markup=manipulations_keyboard)


@dp.message_handler(state='enter_TXA')
async def TXA_calculate(message: types.Message, state: FSMContext):
    try:
        float_persent = float(message.text.strip())
        if float_persent <= 0:
            raise ZeroDivisionError('ü§¶‚Äç‚ôÇÔ∏è—Ç—É–ø–∞—Ä—å!')
        mg_ml = float_persent * 1000 / 100
        enter_ml = {'vv_or_vk': f'{2000 / mg_ml:.2f} ml'
                    }
        await state.finish()
        table = pt.PrettyTable(['–í–≤–µ–¥–µ–Ω–Ω—è', '–î–æ–∑–∞'])
        table.title = f'–î–û–ó–ê {float_persent}% TXA –≤ ml'
        table.align['–í–≤–µ–¥–µ–Ω–Ω—è'] = 'l'
        table.align['–î–æ–∑–∞'] = 'r'

        data = [
            ('–≤/–≤', enter_ml['vv_or_vk']),
            ('–≤/–∫', enter_ml['vv_or_vk']),
        ]
        for intro, dose in data:
            table.add_row([f'{intro}', f'{dose}'])
        await message.answer(text=f'<pre>ü©∏–∑–º–µ–Ω—à–µ–Ω–Ω—è –∫—Ä–æ–≤–æ–≤—Ç—Ä–∞—Ç–∏\n{table}</pre>',
                             parse_mode=types.ParseMode.HTML, reply_markup=manipulations_keyboard)
    except ValueError:
        await state.update_data(percent=message.text, mention=message.from_user.get_mention())
        await message.answer(
            f'<b>‚õî–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥—ñ—Ç—å <u>%-–≤—ñ—Å—Ç—å</u> TXA\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó</b>)',
            reply_markup=fix_keyboard)
    except ZeroDivisionError:
        print(f'ü§¶‚ÄçÔ∏è{message.from_user.full_name} —Ç—É–ø–∞—Ä—å!')
        await state.update_data(percent=message.text, mention=message.from_user.get_mention())
        await message.answer(
            f'<b>ü§¶‚Äç‚ôÇÔ∏è–ó–±–µ—Ä–∏—Å—å, –ø–æ–¥—É–º–∞–π —â–æ –Ω–µ —Ç–∞–∫!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥–∏ <u>%-–≤—ñ—Å—Ç—å</u> TXA\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó</b>)',
            reply_markup=fix_keyboard)


"""–ù–ê–õ–û–ö–°–û–ù"""


@dp.callback_query_handler(drugs_callback.filter(action='nalokson'))
async def nalokson(call: types.CallbackQuery, ):
    await call.message.delete()

    table = pt.PrettyTable(['–í–≤–µ–¥–µ–Ω–Ω—è', '–î–æ–∑–∞'])
    table.title = '–ù–ê–õ–û–ö–°–û–ù'
    table.align['–í–≤–µ–¥–µ–Ω–Ω—è'] = 'l'
    table.align['–î–æ–∑–∞'] = 'r'

    data = [
        ('–≤/–≤', '0.4 –º–≥'),
        ('–≤/–∫', '0.4 –º–≥'),
        ('–≤/–º', '0.4 –º–≥'),
        ('—ñ/–Ω', '0.4 –º–≥'),

    ]
    for intro, dose in data:
        table.add_row([f'{intro}', f'{dose}'])
    await dp.bot.send_message(chat_id=call.from_user.id, text=f'<pre>üß™–∞–Ω—Ç–∏–¥–æ—Ç –¥–æ –æ–ø—ñ–æ—ó–¥—ñ–≤\n{table}</pre>',
                              parse_mode=types.ParseMode.HTML, reply_markup=manipulations_keyboard)


@dp.message_handler(state='enter_nalokson')
async def nalokson_calculate(message: types.Message, state: FSMContext):
    try:
        float_persent = float(message.text.strip())
        if float_persent <= 0:
            raise ZeroDivisionError('ü§¶‚Äç‚ôÇÔ∏è—Ç—É–ø–∞—Ä—å!')
        mg_ml = float_persent * 1000 / 100
        enter_ml = {'vv_or_vk': f'{0.4 / mg_ml:.2f} ml'
                    }
        await state.finish()
        table = pt.PrettyTable(['–í–≤–µ–¥–µ–Ω–Ω—è', '–î–æ–∑–∞'])
        table.title = f'–î–û–ó–ê {float_persent}% –ù–ê–õ–û–ö–°–û–ù–£ –≤ ml'
        table.align['–í–≤–µ–¥–µ–Ω–Ω—è'] = 'l'
        table.align['–î–æ–∑–∞'] = 'r'

        data = [
            ('–≤/–≤', enter_ml['vv_or_vk']),
            ('–≤/–∫', enter_ml['vv_or_vk']),
            ('–≤/–º', enter_ml['vv_or_vk']),
            ('—ñ/–Ω', enter_ml['vv_or_vk']),

        ]
        for intro, dose in data:
            table.add_row([f'{intro}', f'{dose}'])
        await message.answer(text=f'<pre>üß™–∞–Ω—Ç–∏–¥–æ—Ç –¥–æ –æ–ø—ñ–æ—ó–¥—ñ–≤\n{table}</pre>',
                             parse_mode=types.ParseMode.HTML, reply_markup=manipulations_keyboard)
    except ValueError:
        await state.update_data(percent=message.text, mention=message.from_user.get_mention())
        await message.answer(
            f'<b>‚õî–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥—ñ—Ç—å <u>%-–≤—ñ—Å—Ç—å</u> –ù–ê–õ–û–ö–°–û–ù–£\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó</b>)',
            reply_markup=fix_keyboard)
    except ZeroDivisionError:
        print(f'ü§¶‚ÄçÔ∏è{message.from_user.full_name} —Ç—É–ø–∞—Ä—å!')
        await state.update_data(percent=message.text, mention=message.from_user.get_mention())
        await message.answer(
            f'<b>ü§¶‚Äç‚ôÇÔ∏è–ó–±–µ—Ä–∏—Å—å, –ø–æ–¥—É–º–∞–π —â–æ –Ω–µ —Ç–∞–∫!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥–∏ <u>%-–≤—ñ—Å—Ç—å</u> –ù–ê–õ–û–ö–°–û–ù–£\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó</b>)',
            reply_markup=fix_keyboard)


"""–û–î–ê–°–ï–¢–†–û–ù"""


@dp.callback_query_handler(drugs_callback.filter(action='ondasetron'))
async def ondasetron(call: types.CallbackQuery, ):
    await call.message.delete()

    table = pt.PrettyTable(['–í–≤–µ–¥–µ–Ω–Ω—è', '–î–æ–∑–∞'])
    table.title = '–û–ù–î–ê–°–ï–¢–†–û–ù'

    table.align['–í–≤–µ–¥–µ–Ω–Ω—è'] = 'l'
    table.align['–î–æ–∑–∞'] = 'r'
    data = [
        ('–≤/–≤', '2–º–≥ –Ω–∞ 8–≥–æ–¥'),
        ('–≤/–∫', '2–º–≥ –Ω–∞ 8–≥–æ–¥'),
        ('–≤/–º', '2–º–≥ –Ω–∞ 8–≥–æ–¥'),

    ]
    table.add_row(['–ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ–∑–∞', '\u22658–º–≥ –Ω–∞ –¥–æ–±—É'])

    for intro, dose in data:
        table.add_row([f'{intro}', f'{dose}'])
    await dp.bot.send_message(chat_id=call.from_user.id, text=f'<pre>ü§¢–ø—Ä–æ—Ç–∏–±–ª—é–≤–æ—Ç–Ω–∏–π\n{table}</pre>',
                              parse_mode=types.ParseMode.HTML, reply_markup=manipulations_keyboard)


@dp.message_handler(state='enter_ondasetron')
async def ondasetron_calculate(message: types.Message, state: FSMContext):
    try:
        float_persent = float(message.text.strip())
        if float_persent <= 0:
            raise ZeroDivisionError('ü§¶‚Äç‚ôÇÔ∏è—Ç—É–ø–∞—Ä—å!')
        mg_ml = float_persent * 1000 / 100
        enter_ml = {'vv_or_vk': f'{2 / mg_ml:.2f} ml'
                    }
        await state.finish()
        table = pt.PrettyTable(['–í–≤–µ–¥–µ–Ω–Ω—è', '–î–æ–∑–∞'])
        table.title = f'–î–û–ó–ê {float_persent}% –û–ù–î–ê–°–ï–¢–†–û–ù–£ –≤ ml'
        table.align['–í–≤–µ–¥–µ–Ω–Ω—è'] = 'l'
        table.align['–î–æ–∑–∞'] = 'r'

        data = [
            ('–≤/–≤', f"{enter_ml['vv_or_vk']} –Ω–∞ 8–≥–æ–¥"),
            ('–≤/–∫', f"{enter_ml['vv_or_vk']} –Ω–∞ 8–≥–æ–¥"),
            ('–≤/–º', f"{enter_ml['vv_or_vk']} –Ω–∞ 8–≥–æ–¥"),

        ]
        for intro, dose in data:
            table.add_row([f'{intro}', f'{dose}'])
        await message.answer(text=f'<pre>ü§¢–ø—Ä–æ—Ç–∏–±–ª—é–≤–æ—Ç–Ω–∏–π\n{table}</pre>',
                             parse_mode=types.ParseMode.HTML, reply_markup=manipulations_keyboard)
    except ValueError:
        await state.update_data(percent=message.text, mention=message.from_user.get_mention())
        await message.answer(
            f'<b>‚õî–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥—ñ—Ç—å <u>%-–≤—ñ—Å—Ç—å</u> –û–ù–î–ê–°–ï–¢–†–û–ù–£\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó</b>)',
            reply_markup=fix_keyboard)
    except ZeroDivisionError:
        print(f'ü§¶‚ÄçÔ∏è{message.from_user.full_name} —Ç—É–ø–∞—Ä—å!')
        await state.update_data(percent=message.text, mention=message.from_user.get_mention())
        await message.answer(
           f'<b>ü§¶‚Äç‚ôÇÔ∏è–ó–±–µ—Ä–∏—Å—å, –ø–æ–¥—É–º–∞–π —â–æ –Ω–µ —Ç–∞–∫!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥–∏ <u>%-–≤—ñ—Å—Ç—å</u> –û–ù–î–ê–°–ï–¢–†–û–ù–£\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó</b>)',
          reply_markup=fix_keyboard)

"""–°–∞ –•–õ–û–†–ò–î"""


@dp.callback_query_handler(drugs_callback.filter(action='CaCl'))
async def ca_cl(call: types.CallbackQuery, ):
    await call.message.delete()

    table = pt.PrettyTable(['–í–≤–µ–¥–µ–Ω–Ω—è', '–î–æ–∑–∞'])
    table.title = '–°–∞\u00B2‚Å∫–•–õ–û–†–ò–î'

    table.align['–í–≤–µ–¥–µ–Ω–Ω—è'] = 'l'
    table.align['–î–æ–∑–∞'] = 'r'
    data = [
        ('–≤/–≤', '1 –≥—Ä (1000–º–≥)'),
        ('–≤/–∫', '1 –≥—Ä (1000–º–≥)'),

    ]

    for intro, dose in data:
        table.add_row([f'{intro}', f'{dose}'])
    await dp.bot.send_message(chat_id=call.from_user.id, text=f'<pre>üìå¬´–±–ª–æ–∫–∞—Ç–æ—Ä¬ª —Ü–∏—Ç—Ä–∞—Ç—É –Ω–∞—Ç—Ä—ñ—è\n{table}</pre>',
                              parse_mode=types.ParseMode.HTML, reply_markup=manipulations_keyboard)


@dp.message_handler(state='enter_CaCl')
async def cacl_calculate(message: types.Message, state: FSMContext):
    try:
        float_persent = float(message.text.strip())
        if float_persent <= 0:
            raise ZeroDivisionError('ü§¶‚Äç‚ôÇÔ∏è—Ç—É–ø–∞—Ä—å!')
        mg_ml = float_persent * 1000 / 100
        enter_ml = {'vv_or_vk': f'{1000 / mg_ml:.2f} ml'
                    }
        await state.finish()
        table = pt.PrettyTable(['–í–≤–µ–¥–µ–Ω–Ω—è', '–î–æ–∑–∞'])
        table.title = f'–î–û–ó–ê {float_persent}% –°–∞\u00B2‚Å∫–•–õ–û–†–ò–î–£ –≤ ml'
        table.align['–í–≤–µ–¥–µ–Ω–Ω—è'] = 'l'
        table.align['–î–æ–∑–∞'] = 'r'

        data = [
            ('–≤/–≤', f"{enter_ml['vv_or_vk']} "),
            ('–≤/–∫', f"{enter_ml['vv_or_vk']} "),

        ]
        for intro, dose in data:
            table.add_row([f'{intro}', f'{dose}'])
        await message.answer(text=f'<pre>üìå¬´–±–ª–æ–∫–∞—Ç–æ—Ä¬ª —Ü–∏—Ç—Ä–∞—Ç—É –Ω–∞—Ç—Ä—ñ—è\n{table}</pre>',
                             parse_mode=types.ParseMode.HTML, reply_markup=manipulations_keyboard)
    except ValueError:
        await state.update_data(percent=message.text, mention=message.from_user.get_mention())
        await message.answer(
            f'<b>‚õî–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥—ñ—Ç—å <u>%-–≤—ñ—Å—Ç—å</u> –°–∞\u00B2‚Å∫–•–õ–û–†–ò–î–£\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó</b>)',
            reply_markup=fix_keyboard)
    except ZeroDivisionError:
        print(f'ü§¶‚ÄçÔ∏è{message.from_user.full_name} —Ç—É–ø–∞—Ä—å!')
        await state.update_data(percent=message.text, mention=message.from_user.get_mention())
        await message.answer(
          f'<b>ü§¶‚Äç‚ôÇÔ∏è–ó–±–µ—Ä–∏—Å—å, –ø–æ–¥—É–º–∞–π —â–æ –Ω–µ —Ç–∞–∫!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥–∏ <u>%-–≤—ñ—Å—Ç—å</u> –°–∞\u00B2‚Å∫–•–õ–û–†–ò–î–£\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó</b>)',
          reply_markup=fix_keyboard)


"""–°–∞ –ì–ª—é–∫–æ–Ω–∞—Ç"""


@dp.callback_query_handler(drugs_callback.filter(action='Ca_hlukoza'))
async def ca_hlukoza(call: types.CallbackQuery, ):
    await call.message.delete()

    table = pt.PrettyTable(['–í–≤–µ–¥–µ–Ω–Ω—è 10%-–≥–æ', '–î–æ–∑–∞ –≤ ml'])
    table.title = '–°–∞\u00B2‚Å∫–ì–õ–Æ–ö–û–ù–ê–¢'

    table.align['–í–≤–µ–¥–µ–Ω–Ω—è 10%-–≥–æ'] = 'l'
    table.align['–î–æ–∑–∞ –≤ ml'] = 'r'
    data = [
        ('–≤/–≤', '30 ml'),
        ('–≤/–∫', '30 ml'),

    ]

    for intro, dose in data:
        table.add_row([f'{intro}', f'{dose}'])
    await dp.bot.send_message(chat_id=call.from_user.id, text=f'<pre>üìå¬´–±–ª–æ–∫–∞—Ç–æ—Ä¬ª —Ü–∏—Ç—Ä–∞—Ç—É –Ω–∞—Ç—Ä—ñ—è\n{table}</pre>',
                              parse_mode=types.ParseMode.HTML, reply_markup=back_drug_keyboard)


"""–§–ï–ù–¢–ê–ù–Ü–õ"""


@dp.callback_query_handler(drugs_callback.filter(action='fentanil'))
async def ca_hlukoza(call: types.CallbackQuery, ):
    await call.message.delete()

    table = pt.PrettyTable(['–í–≤–µ–¥–µ–Ω–Ω—è', '–î–æ–∑–∞'])
    table.title = '–§–ï–ù–¢–ê–ù–Ü–õ (–ª—å–æ–¥—è–Ω–∏–∫)'

    data = [
        ('1 –ª—å–æ–¥—è–Ω–∏–∫', '800 –º–∫–≥'),

    ]

    for intro, dose in data:
        table.add_row([f'{intro}', f'{dose}'])
    await dp.bot.send_message(chat_id=call.from_user.id, text=f'<pre>üòñ–∑–Ω–µ–±–æ–ª–µ–Ω–Ω—è\n{table}</pre>',
                              parse_mode=types.ParseMode.HTML, reply_markup=back_drug_keyboard)




"""–ï–†–¢–ê–ü–ï–ù–ï–ú"""


@dp.callback_query_handler(drugs_callback.filter(action='ertapenem'))
async def ca_hlukoza(call: types.CallbackQuery, ):
    await call.message.delete()

    table = pt.PrettyTable(['–í–≤–µ–¥–µ–Ω–Ω—è', '–î–æ–∑–∞ 100%-–≥–æ'])
    table.title = '–ï–†–¢–ê–ü–ï–ù–ï–ú'

    data = [
        ('–≤/–≤', '1 –≥—Ä (1000–º–≥)'),
        ('–≤/–∫', '1 –≥—Ä (1000–º–≥)'),
        ('–≤/–º', '1 –≥—Ä (1000–º–≥)'),

    ]

    for intro, dose in data:
        table.add_row([f'{intro}', f'{dose}'])
    await dp.bot.send_message(chat_id=call.from_user.id, text=f'<pre>üíâ–∞–Ω—Ç–∏–±—ñ–æ—Ç–∏–∫\n{table}</pre>',
                              parse_mode=types.ParseMode.HTML, reply_markup=back_drug_keyboard)
